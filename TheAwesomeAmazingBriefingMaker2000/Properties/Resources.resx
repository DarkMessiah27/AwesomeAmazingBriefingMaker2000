<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminTabEndingMessagesTextBottom" xml:space="preserve">
    <value>
If the mission cannot be ended by one of these buttons then the admin only chat command &lt;font color='#FF8C00'&gt;#endMission&lt;/font&gt; can be used.

This can be done even from spectator.
Any text following the command will be the end screen message.
The html linebreak tag &amp;lt;br/&amp;gt; can be used to make it multiline.

For example:
#endMission The enemy has been routed and we are victorious.&amp;lt;br/&amp;gt;Major Victory
</value>
  </data>
  <data name="AdminTabEndingMessagesTextTop" xml:space="preserve">
    <value>These are used to call the mission endings that the mission maker has set up.

Please be careful as a single click will end the mission immediately.
</value>
  </data>
  <data name="AdminTabStaticText" xml:space="preserve">
    <value>private _adminState = call BIS_fnc_admin;
private _uid = getPlayerUID player;
if (
(_adminState != 0) ||
{!isNil "God" &amp;&amp; {God isEqualTo player || {group player isEqualTo group God}}} ||
{_uid isEqualTo "76561198006804011"} || // Brauer
{_uid isEqualTo "76561197989925440"} || // Falk
{_uid isEqualTo "76561198028284438"} || // Feld
{_uid isEqualTo "76561197983143701"} || // Madsen
{_uid isEqualTo "76561197985738940"} || // Sauer
{_uid isEqualTo "76561198096113294"}    // Schuttler
) then {
// This tab has clickable commands to allow the admin or zeus to end the mission.
// More may be added by makin an entry here and adding a corresponding entry in the settings.sqf
NEWTAB("Admin Tab")
&lt;br/&gt;The server admin, the Zeus (if present), and all Council members have access to these options.
&lt;br/&gt;
&lt;br/&gt;&lt;font color='#70db70' size='14'&gt;Respawn Wave:&lt;/font&gt;
&lt;br/&gt;This is used to call a respawn wave on demand, it will give the players in spectator a single respawn with a 10 second timer.
&lt;br/&gt;
&lt;br/&gt;This must NOT be used in missions that already have respawning enabled.
&lt;br/&gt;   &lt;execute expression=' \
			{FW_RespawnTickets = 1; setPlayerRespawnTime random 10;} remoteExec [""call"",west]; [{{FW_RespawnTickets = 1; setPlayerRespawnTime 10e10;} remoteExec [""call"",west];},[],30] call CBA_fnc_waitAndExecute; \
		'&gt;Call Respawn Wave for Blufor&lt;/execute&gt;
&lt;br/&gt;
&lt;br/&gt;   &lt;execute expression=' \
			{FW_RespawnTickets = 1; setPlayerRespawnTime random 10;} remoteExec [""call"",east]; [{{FW_RespawnTickets = 1; setPlayerRespawnTime 10e10;} remoteExec [""call"",east];},[],30] call CBA_fnc_waitAndExecute; \
		'&gt;Call Respawn Wave for Opfor&lt;/execute&gt;
&lt;br/&gt;
&lt;br/&gt;   &lt;execute expression=' \
			{FW_RespawnTickets = 1; setPlayerRespawnTime random 10;} remoteExec [""call"",independent]; [{{FW_RespawnTickets = 1; setPlayerRespawnTime 10e10;} remoteExec [""call"",independent];},[],30] call CBA_fnc_waitAndExecute; \
		'&gt;Call Respawn Wave for Indfor&lt;/execute&gt;
&lt;br/&gt;
&lt;br/&gt;If the admin is dead and in spectator they can also trigger a respawn by typing one of these admin only chat commands in spectator chat:
&lt;br/&gt;&lt;font color='#FF8C00'&gt;#respawnBlue&lt;/font&gt;
&lt;br/&gt;&lt;font color='#FF8C00'&gt;#respawnRed&lt;/font&gt;
&lt;br/&gt;&lt;font color='#FF8C00'&gt;#respawnGreen&lt;/font&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;font color='#70db70' size='14'&gt;Helper Checks:&lt;/font&gt;// Server vars
&lt;br/&gt;These are anything the mission maker wants to be able to check in game.
&lt;br/&gt;
&lt;br/&gt;    &lt;execute expression='systemChat str westCasualty'&gt;Check Blufor Casualty Percentage&lt;/execute&gt;
&lt;br/&gt;    &lt;execute expression='systemChat str eastCasualty'&gt;Check Opfor Casualty Percentage&lt;/execute&gt;
// &lt;br/&gt;    &lt;execute expression='systemChat str resistanceCasualty'&gt;Check Indfor Casualty Percentage&lt;/execute&gt;
// &lt;br/&gt;    &lt;execute expression='systemChat str civilianCasualty'&gt;Check Civilian Casualty Percentage&lt;/execute&gt;
&lt;br/&gt;    &lt;execute expression='systemChat str testVar'&gt;Test Boolean Handling&lt;/execute&gt;</value>
  </data>
  <data name="ClanName" xml:space="preserve">
    <value>2. Panzer-Division</value>
  </data>
  <data name="DefaultEnglishAttachments" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="DefaultEnglishFriendlyComposition" xml:space="preserve">
    <value>1x Company consisting of:

    1x Company HQ
    1x Reserve Section

    2x Platoons, each consiting of:
        1x Platoon HQ
        3x Sections</value>
  </data>
  <data name="DefaultGermanAssets" xml:space="preserve">
    <value>6x Sonderkraftfahrzeug 251/1</value>
  </data>
  <data name="DefaultGermanAttachments" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="DefaultGermanFriendlyComposition" xml:space="preserve">
    <value>1x Kompanie consisting of:

    1x Kompanietrupp
    1x Ersatztruppen

    2x Züge, each consiting of:
        1x Zugtrupp
        3x Gruppen</value>
  </data>
  <data name="EndingConditionsNotSetError" xml:space="preserve">
    <value>You need to fill in at least one victory and one defeat condition in the Admin Tab!</value>
  </data>
  <data name="EnglishCallSigns" xml:space="preserve">
    <value>HQ - Company HQ

1-0: 1 Platoon HQ
1-1: 1 Platoon, 1 Section
1-2: 1 Platoon, 2 Section
1-3: 1 Platoon, 3 Section

2-0: 2 Platoon HQ
2-1: 2 Platoon, 1 Section
2-2: 2 Platoon, 2 Section
2-3: 2 Platoon, 3 Section</value>
  </data>
  <data name="EnglishEnemyForces" xml:space="preserve">
    <value>Enemy Forces</value>
  </data>
  <data name="EnglishFriendlyForces" xml:space="preserve">
    <value>Friendly Forces</value>
  </data>
  <data name="EnglishIntelligence" xml:space="preserve">
    <value>Intelligence</value>
  </data>
  <data name="EnglishMission" xml:space="preserve">
    <value>Mission</value>
  </data>
  <data name="EnglishRadioFrequencies" xml:space="preserve">
    <value>Frequency 51.00 MHz - Company Net
Frequency 31.00 MHz - 1 Platoon Sub-Net
Frequency 54.00 MHz - 2 Platoon Sub-Net</value>
  </data>
  <data name="EnglishSignals" xml:space="preserve">
    <value>Signals</value>
  </data>
  <data name="EnglishSituation" xml:space="preserve">
    <value>Situation</value>
  </data>
  <data name="GenerationSuccessMessage" xml:space="preserve">
    <value>Your briefing was successfully generated! Please run your mission in the editor and check if everything is correct.</value>
  </data>
  <data name="GenericErrorMessage" xml:space="preserve">
    <value>Something went wrong while trying to generate the briefing. An error log was created in the location of the Briefing Maker's .exe. Please send it to Brauer.</value>
  </data>
  <data name="GermanCallSigns" xml:space="preserve">
    <value>HQ - High command (Zeus)

1-0: 1 Zug, Zugtrupp
1-1: 1 Zug, 1 Gruppe
1-2: 1 Zug, 2 Gruppe
1-3: 1 Zug, 3 Gruppe

2-0: 2 Zug, Zugtrupp
2-1: 2 Zug, 1 Gruppe
2-2: 2 Zug, 2 Gruppe
2-3: 2 Zug, 3 Gruppe</value>
  </data>
  <data name="GermanEnemyForces" xml:space="preserve">
    <value>Feindliche Kräfte</value>
  </data>
  <data name="GermanFriendlyForces" xml:space="preserve">
    <value>Eigene Kräfte</value>
  </data>
  <data name="GermanIntelligence" xml:space="preserve">
    <value>Aufklärung</value>
  </data>
  <data name="GermanMission" xml:space="preserve">
    <value>Auftrag</value>
  </data>
  <data name="GermanProwords" xml:space="preserve">
    <value>(Examples are in German, as that is the way the prowords are described in our radio manual.)

Ende - Out, reply not required

Kommen - Over, reply to me

Actual - Used for the commander of a unit.
Example: '1 Actual' is the Zugführer of 1. Zug, not his Funker, who would identify with '1-0'.</value>
  </data>
  <data name="GermanRadioFrequencies" xml:space="preserve">
    <value>Frequency 51.00 MHz - Kompanie Net
Frequency 31.00 MHz - 1 Zug Sub-Net
Frequency 54.00 MHz - 2 Zug Sub-Net</value>
  </data>
  <data name="GermanSignals" xml:space="preserve">
    <value>Gefechtssignale</value>
  </data>
  <data name="GermanSituation" xml:space="preserve">
    <value>Lage</value>
  </data>
  <data name="HandSignals" xml:space="preserve">
    <value>Waving like an idiot - I'm friendly, don't shoot me
Spamming Q and E, aka the 'friendly dance' - I'm friendly, don't shoot me</value>
  </data>
  <data name="IOErrorMessage" xml:space="preserve">
    <value>Could not find the briefing.sqf or endConditions.sqf. Please make sure you select the root folder of your mission (the folder that has the mission.sqm in it).</value>
  </data>
  <data name="PathNotSetErrorMessage" xml:space="preserve">
    <value>You need to set the path to your mission folder first! Please click the "Select mission folder" button and select the root folder of your mission (the folder with the mission.sqm in it).</value>
  </data>
  <data name="RussianEnemyForces" xml:space="preserve">
    <value>Вражеские Силы</value>
  </data>
  <data name="RussianFriendlyForces" xml:space="preserve">
    <value>Дружественные Силы</value>
  </data>
  <data name="RussianIntelligence" xml:space="preserve">
    <value>Разведка</value>
  </data>
  <data name="RussianMission" xml:space="preserve">
    <value>Задача</value>
  </data>
  <data name="RussianSignals" xml:space="preserve">
    <value>Информация</value>
  </data>
  <data name="RussianSituation" xml:space="preserve">
    <value>Ситуация</value>
  </data>
  <data name="SmokeSignals" xml:space="preserve">
    <value>Green - Go signal
Red - Stop/halt signal
Purple - Request support
Orange - Need a medic
Blue - Friendly position
Yellow - Regroup on that position
White - Used for concealment only</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="trident" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\trident.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="VersionNumber" xml:space="preserve">
    <value>1.1.7</value>
  </data>
</root>